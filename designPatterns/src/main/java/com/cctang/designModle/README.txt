
===================================================单例模式（Singleton）=====================================================

实现单利模式的原则和过程：
    1.单例模式：确保一个类只有一个实例，自行实例化并向系统提供这个实例
    2.单例模式分类：饿单例模式（类加载时实例化一个对象给自己的引用），懒单例模式（调用取得实例的方法如getInstance时才会实例化对象）（java中饿单例模式性能优于懒单例模式，c++中一般使用懒单例模式）
    3.单例模式要素：
        a.私有构造方法
        b.私有静态引用指向自己实例
        c.以自己实例为返回值的公有静态方法

使用场景：数据库连接池的设计、多线程的线程池的设计、网站的计数器、Web应用的配置对象的读取

类加载顺序
类加载(classLoader)机制一般遵从下面的加载顺序

如果类还没有被加载：

先执行父类的静态代码块和静态变量初始化，静态代码块和静态变量的执行顺序跟代码中出现的顺序有关。
执行子类的静态代码块和静态变量初始化。
执行父类的实例变量初始化
执行父类的构造函数
执行子类的实例变量初始化
执行子类的构造函数
同时，加载类的过程是线程私有的，别的线程无法进入。

如果类已经被加载：

静态代码块和静态变量不在重复执行，再创建类对象时，只执行与实例相关的变量初始化和构造方法。


懒汉和饿汉
在程序编写上，一般将单例模式分为两种，分别是饿汉式和懒汉式，

饿汉式：在类加载时就完成了初始化，所以类加载比较慢，但获取对象的速度快。
        优点
            1.线程安全
            2.在类加载的同时已经创建好一个静态对象，调用时反应速度快
        缺点
            资源效率不高，可能getInstance()永远不会执行到，但执行该类的其他静态方法或者加载了该类（class.forName)，那么这个实例仍然初始化

懒汉式：在类加载时不初始化，等到第一次被使用时才初始化。
        优点：
            避免了饿汉式的那种在没有用到的情况下创建事例，资源利用率高，不执行getInstance()就不会被实例，可以执行该类的其他静态方法。
        缺点：
            懒汉式在单个线程中没有问题，但多个线程同事访问的时候就可能同事创建多个实例，而且这多个实例不是同一个对象，
            虽然后面创建的实例会覆盖先创建的实例，但是还是会存在拿到不同对象的情况。解决这个问题的办法就是加锁synchonized，第一次加载时不够快，多线程使用不必要的同步开销大。

双重检测
        优点
            资源利用率高，不执行getInstance()就不被实例，可以执行该类其他静态方法
        缺点
            第一次加载时反应不快，由于java内存模型一些原因偶尔失败

静态内部类
        优点
            资源利用率高，不执行getInstance()不被实例，可以执行该类其他静态方法
        缺点
            第一次加载时反应不够快

总结：
    一般采用饿汉式，若对资源十分在意可以采用静态内部类，不建议采用懒汉式及双重检测


====================================================建造者模式====================================================================

定义：指将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。

它是将一个复杂的对象分解为多个简单的对象，然后一步一步构建而成。

优点：

封装性好，构建和表示分离。
扩展性好，各个具体的建造者相互独立，有利于系统的解耦。
客户端不必知道产品内部组成的细节，建造者可以对创建过程逐步细化，而不对其它模块产生任何影响，便于控制细节风险。
建造者（Builder）模式和工厂模式的关注点不同：建造者模式注重零部件的组装过程，而工厂方法模式更注重零部件的创建过程，但两者可以结合使用。

成员结构：

产品（Product）：它是包含了多个组成部分的复杂的对象，由具体的创造者完成另加后由指挥者组装而成
抽象建造者（Builder）：它是一个包含创建产品各个子部件的方法接口，又具体建造者继承，通常还需要包含一个返回复杂产品的方法
具体建造者(Concrete Builder）：实现Builder接口，完成各个零部件的具体化的创建方法
指挥者（Director）：负责调用建造者对象中的部件构造和装配的方法，从而完成复杂对象的创建
